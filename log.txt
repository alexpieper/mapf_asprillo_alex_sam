Setup
	- 4x4 grid and then get fancier if necessary
	- fuse 4-connected neighbors into one abstracted cell
Questions:
	-q1: name of abstracted cells?
	-q2: how to specify the abstractions?
	-q3: how to deal with time from abstracted solution to the original grid?
	-q4: groups of 2x2 don't work when width%2 != 0 or height%2 != 0. What to do with remaining rows/cols?
	-q5: how to deal with neighboring agents or goals when performing the abstraction?
	-q6: 
		q6.1: how not to loose information when abstracting the location of the agent to the new abstracted cell? 
		q6.2: is it possible to add atoms that will be ignored by the solver?
		we can maybe have extra atoms/commands in the .lp file that contain information of the original location and are ignored when 
		inputed to the solver so the output plan still has those atoms and we can just use that info to modify the plan accordingly. 
	-q7: can we, as part of the abstraction process, split the original file into multiple files and then fuse the multiple outputs of the solver?
	-q8: how can multiple files be fused into one using asp?
	-q9: what are the absolute minimum requirements for approving? is solving only 2nx2m instances enough? 
	is solving only instances where there are no two agents next to each other enough?
	-q10: why is there no wait actions?
	-q11: all asprilo domains tacke the annonymous mapf problem? There is no way to assign robots to orders.

Ideas:
	- Name: always the bottom left cell as anchor point: cell(1,1), cell(2,1), cell(1,2), cell(2,2) become abstracted_cell(1,1) etc.
	- Specification: prob. In the .lp, with  abstracted_cell(X,Y) :- cell(X,Y), cell(X+1,Y), cell(X,Y+1), cell(X+1,Y+1), not abstacted_cell(X+1,Y+1) 
	- that is a harder questions
	- we prop. Have to write an exception (another abstracted_cell(X,Y) definition, dependent on left over cells)

